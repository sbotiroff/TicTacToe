{"version":3,"sources":["components/TicTacToeHeader.jsx","components/TicTacToeBox.jsx","components/PlayerTurn.jsx","components/WinnerStatus.jsx","components/TicTacToeContainer.jsx","components/GameLayout.jsx","App.js","serviceWorker.js","index.js"],"names":["TicTacToeHeader","react_default","a","createElement","TicTacToeBox","_ref","onClick","xOrO","className","Flip_default","when","playerTurn","props","isXTurn","winnerStatus","winner","TicTacToeContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","restartGame","setState","boxes","showRestartBtn","state","x","o","index","_this$state","newBox","toConsumableArray","currentPlayer","hasWinner","winningNumbers","i1","i2","i3","i","length","element1","element2","element3","doBoxesFieldsFull","_this2","_this$state2","components_WinnerStatus","components_PlayerTurn","map","box","components_TicTacToeBox","key","setValue","Zoom_default","Component","GameLayout","src_components_TicTacToeContainer","App","components_TicTacToeHeader","components_GameLayout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43e8c262.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TicTacToeHeader.css\";\r\n\r\nfunction TicTacToeHeader() {\r\n  return (\r\n    <header>\r\n      <h1>Tic Tac Toe</h1>\r\n      <h2>Multiplayer Mode</h2>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default TicTacToeHeader;\r\n","import React from \"react\";\r\nimport \"./TicTacToeBox.css\";\r\nimport Flip from \"react-reveal/Flip\";\r\n\r\nfunction TicTacToeBox({ onClick, xOrO }) {\r\n  return (\r\n    <div onClick={onClick} className=\"TicTacToeBox\">\r\n      <Flip when={!!xOrO}>{xOrO}</Flip>\r\n    </div>\r\n  );\r\n}\r\nexport default TicTacToeBox;\r\n","import React from \"react\";\r\nimport \"./PlayerTurn.css\";\r\n\r\nfunction playerTurn(props) {\r\n  return (\r\n    <div className=\"PlayerTurn\">\r\n      <p>Player {props.isXTurn ? \"X\" : \"O\"}'s turn</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default playerTurn;\r\n","import React from \"react\";\r\nimport \"./WinnerStatus.css\";\r\n\r\nfunction winnerStatus({ winner }) {\r\n  return (\r\n    <div className=\"WinnerStatus\">\r\n      <p>{winner}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default winnerStatus;\r\n","import React, { Component } from \"react\";\r\nimport TicTacToeBox from \"./TicTacToeBox\";\r\nimport PlayerTurn from \"./PlayerTurn\";\r\nimport WinnerStatus from \"./WinnerStatus\";\r\nimport \"./TicTacToeContainer.css\";\r\nimport Zoom from \"react-reveal/Zoom\";\r\n\r\nclass TicTacToeContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isXTurn: true,\r\n      x: \"X\",\r\n      o: \"O\",\r\n      boxes: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      winner: null,\r\n      showRestartBtn: false\r\n    };\r\n  }\r\n  setValue(index) {\r\n    const { boxes, isXTurn, x, o, showRestartBtn } = this.state;\r\n    const newBox = [...boxes];\r\n    let currentPlayer = !isXTurn ? o : x;\r\n\r\n    if (newBox[index] === \"\" && !showRestartBtn) {\r\n      newBox[index] = currentPlayer;\r\n      this.setState(\r\n        {\r\n          boxes: newBox,\r\n          isXTurn: !isXTurn\r\n        },\r\n        this.hasWinner\r\n      );\r\n    }\r\n  }\r\n\r\n  hasWinner() {\r\n    const winningNumbers = [\r\n      { i1: 0, i2: 1, i3: 2 },\r\n      { i1: 0, i2: 3, i3: 6 },\r\n      { i1: 0, i2: 4, i3: 8 },\r\n      { i1: 1, i2: 4, i3: 7 },\r\n      { i1: 2, i2: 5, i3: 8 },\r\n      { i1: 2, i2: 4, i3: 6 },\r\n      { i1: 3, i2: 4, i3: 5 },\r\n      { i1: 6, i2: 7, i3: 8 }\r\n    ];\r\n\r\n    const { boxes } = this.state;\r\n    for (let i = 0; i < winningNumbers.length; i++) {\r\n      let element1 = boxes[winningNumbers[i].i1];\r\n      let element2 = boxes[winningNumbers[i].i2];\r\n      let element3 = boxes[winningNumbers[i].i3];\r\n      let isEqual =\r\n        element1 === element2 &&\r\n        element1 === element3 &&\r\n        element2 === element3 &&\r\n        element1 !== \"\";\r\n      if (isEqual) {\r\n        const box = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n        this.setState({\r\n          isXTurn: true,\r\n          winner: \"Good job hey player : \" + element1,\r\n          showRestartBtn: true\r\n        });\r\n        return true;\r\n      }\r\n    }\r\n    if (this.doBoxesFieldsFull()) {\r\n      this.setState({\r\n        winner: \"No winner play again\",\r\n        showRestartBtn: true\r\n      });\r\n\r\n      return false;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      boxes: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      isXTurn: true,\r\n      winner: null,\r\n      showRestartBtn: false\r\n    });\r\n  };\r\n\r\n  doBoxesFieldsFull() {\r\n    const { boxes } = this.state;\r\n    for (let i = 0; i < boxes.length; i++) {\r\n      if (boxes[i] === \"\") {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    const { boxes, showRestartBtn } = this.state;\r\n    return (\r\n      <div className=\"TicTacToeContainer\">\r\n        {showRestartBtn ? (\r\n          <WinnerStatus winner={this.state.winner} />\r\n        ) : (\r\n          <PlayerTurn isXTurn={this.state.isXTurn} />\r\n        )}\r\n\r\n        <div className=\"TicTacToeContainerBox\">\r\n          {boxes.map((box, index) => {\r\n            return (\r\n              <TicTacToeBox\r\n                key={index}\r\n                onClick={() => this.setValue(index)}\r\n                xOrO={boxes[index]}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        {showRestartBtn ? (\r\n          <Zoom>\r\n            <button\r\n              onClick={this.restartGame}\r\n              className=\"TicTacToeContainerBtn\"\r\n            >\r\n              Restart Game\r\n            </button>\r\n          </Zoom>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TicTacToeContainer;\r\n","import React from 'react';\r\nimport TicTacToeContainer from './TicTacToeContainer';\r\n\r\nfunction GameLayout(){\r\n    return(\r\n        <div>\r\n            <TicTacToeContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameLayout;","import React from 'react';\nimport TicTacToeHeader from './components/TicTacToeHeader';\nimport GameLayout from './components/GameLayout';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicTacToeHeader />\n      <GameLayout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}